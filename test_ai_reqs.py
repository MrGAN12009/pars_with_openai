import telebot
import requests
import openai
import time
import json
import re
# import gspread
# from oauth2client.service_account import ServiceAccountCredentials
from shapely.geometry import shape, Point

TOKEN = ""
bot = telebot.TeleBot(TOKEN)
openai.api_key = ""
ASSISTANT_ID = ""

threads = {}
chats = {}

knowledge_base = "оплата наличными - Оплата наличными не принимается, вы можете оплатить картой;оплата kaspired - Kaspi RED есть только на Зелёном базаре, в других магазинах можно оформить через KaspiPay или картой;оплата onay - В данный момент не работает отплата через onay, можете оплатить заказ катой;проблема с выбором способа оплаты - Оплата наличными не принимается. Kaspi RED есть только на Зелёном базаре, в других магазинах можно оформить через KaspiPay;не могу привязать карту - Карту можно привязать в корзине магазина при оформлении заказа;не хочу платить за доставку - Стоимость доставки рассчитывается автоматически. Можно подписаться на наш Instagram и получить промокод на бесплатную доставку.\nС условиями доставки можно ознакомиться в момент оформления заказа;не знаю как воспользоваться промоком - При оформлении заказа, необходимо в Поле промокод ввести Ваш промокод и он будет успешно применен;не могу выбрать свой регион доставки - Предоставьте ваш адрес для проверки входит ли он в зону доставки;не могу найти товар - У нас есть широкий ассортимент товаров включая продукты питания, бытовую химию, товары для дома и многое другое. Могу уточнить список по конкретным категориям, если нужно"

base = """БАЗА ЗНАНИЙ"""

trigger_words = {"помощь", "поддержк", "оператор", "консультант", "жалоба", "возврат", "менеджер"}


def frst_req(question):
    print("Вопрос111:", question)

    response = openai.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "system",
                   "content": f"Ты ИИ КОНСУЛЬТАНТ КОМПАНИИ instashop, который стремится помочь клиенту и ответить на его вопросы. {knowledge_base}, если вопрос является вопросом об адресе доставки, то в ответ верни такое сообщение(adr:тут адрес который сможет воспринять nominatim.openstreetmap.org/search), если в запросе не указан город: уточни его у пользователя и опирайся на всю историю диалога. Отвечай на том языке, на котором был задан вопрос, если вопрос не относится ни к одной категории из перечисленных ранее или является вопросом про товар - то верни ТОЛЬКО СЛОВО ОПЕРАТОР"},
                  {"role": "user",
                   "content": f"используя информацию выше ответь клиенту, ты обязан давать максимально чёткий и грамотный ответ основываясь на базе: {question}"}]
    )
    reply_text = response.choices[0].message.content  # Получаем ответ из OpenAI
    input_tokens = response.usage.prompt_tokens
    output_tokens = response.usage.completion_tokens
    total_cost = (input_tokens / 1000 * 0.0005) + (output_tokens / 1000 * 0.0015)

    print(f"Входящие токены: {input_tokens}")
    print(f"Исходящие токены: {output_tokens}")
    print(f"Стоимость запроса: ${total_cost:.6f}")
    print("________________________________")
    return reply_text


def ai_request(user_id, question):
    print("Вопрос:", question)

    response = openai.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "system",
                   "content": f"Ты ИИ КОНСУЛЬТАНТ компании instashop, занимающейся доставкой продуктов на дом, который стремится помочь клиенту и ответить на его вопросы. Вот инфо о компании:{base}.\n Вот ответы на частые вопросы: {knowledge_base}. Ответы возвращай в формате текста, последующего форматирования - нет(для ссылок просто прописывай их в тексте, без спец символов, ковычек и скобок).ЕСЛИ В ВОПРОСЕ КЛИЕНТ СПРАШИВАЕТ ПРО ТОВАР И УКАЗЫВАЕТ КОНКРЕТНЫЙ МАГАЗИН, ТО ТЫ ДОЛЖЕН ПРЕДОСТАВИТЬ ИЗ БАЗЫ ПОЛЬЗОВАТЕЛЮ ССЫЛКУ НА УКАЗАННЫЙ ТОВАР В ДАННОМ МАГАЗИНЕ. ЕСЛИ ПОЛЬЗОВАТЕЛЬ ЯВНО НЕ УКАЗАЛ МАГАЗИН, ТО УТОЧНИ В КАКОМ МАГАЗИНЕ ЕГО ИСНТЕРЕСУЮТ ТОВАРЫ. Не пиши примеры товаров из магазинов, если клиент запрашивает информацию о товарах, но не указал конкретный магазин. ОТВЕЧАЙ НА ТОМ ЯЗЫКЕ, НА КОТОРОМ БЫЛ ЗАДАН ВОПРОС! Не здоровайся и не приветствуй клиента"},
                  {"role": "user",
                   "content": f"используя информацию выше овтеть клиенту: {question}, отвечай на языке на котором был задан вопрос"}]
    )
    reply_text = response.choices[0].message.content  # Получаем ответ из OpenAI
    input_tokens = response.usage.prompt_tokens
    output_tokens = response.usage.completion_tokens
    total_cost = (input_tokens / 1000 * 0.0005) + (output_tokens / 1000 * 0.0015)

    print(f"Входящие токены: {input_tokens}")
    print(f"Исходящие токены: {output_tokens}")
    print(f"Стоимость запроса: ${total_cost:.6f}")
    print("________________________________")
    return reply_text


# Функция обработки сообщений
@bot.message_handler(func=lambda message: True)
def handle_question(message):
    print(chats)
    user_id = message.chat.id
    question = message.text.lower()
    if user_id in chats and len(chats[user_id]) >= 9:
        del chats[user_id][0]
        del chats[user_id][0]
    elif user_id not in chats:
        chats[user_id] = []

    if any(word in question for word in trigger_words):
        bot.send_message(user_id, "Позвал менеджера, ожидайте")
        return

    res = frst_req(
        f"Вот история далога: {chats[user_id]}. Вот новый вопрос клиента на который надо ответить:{question}")
    print(res)

    try:

        if "adr" in res.lower():
            res = get_coordinates(res.split(":")[1])
            try:
                lat, lon = res.get("lat"), res.get("lon")
            except BaseException as e:
                bot.send_message(user_id, "Ошибка во время обработки адреса")
                return
            in_polygon = check_coordinates_in_geojson(lat, lon)
            if in_polygon == -1:
                result = ai_request(user_id,
                                    f"Вот история диалога с клиентом: {chats[user_id]}. Вот новый вопрос клиента, на который надо ответить: {question}")
                if not result or result.startswith("Ошибка"):
                    bot.send_message(user_id, "Извините, я не могу ответить на этот вопрос. Свяжитесь с оператором.")
                    return
                chats[user_id].append(f"Вот сообщение клиента: {question}")
                chats[user_id].append(f"На него мы ответили так: {result}")
                bot.send_message(user_id, result)
                return
            ans = "входит" if in_polygon else "не входит"
            response = openai.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "system",
                           "content": f"Ранее клиент прислал свой адрес, куда ему доставить товары нашего магазина. Вот ответ после проверки, входит ли его адрес в зону нашей доставки: {ans} . Ответь ему как ИИ-консультант, который стремится помочь клиенту и ответить на его вопросы.Не здоровайся и не приветствуй клиента"},
                          {"role": "user",
                           "content": f"Вот история далога: {chats[user_id]}. Вот новый вопрос клиента на который надо ответить:{question}"}]
            )
            reply_text = response.choices[0].message.content
            chats[user_id].append(question)
            chats[user_id].append(reply_text)
            bot.send_message(user_id, reply_text)
            return
        if res.lower() != "оператор":
            bot.send_message(user_id, res)
            chats[user_id].append(f"Вот сообщение клиента: {question}")
            chats[user_id].append(f"На него мы ответили так: {res}")
            return
        # Определяем категорию вопроса
        result = ai_request(user_id,
                            f"Вот история диалога с клиентом: {chats[user_id]}. Вот новый вопрос клиента, на который надо ответить: {question}")
        if not result or result.startswith("Ошибка"):
            bot.send_message(user_id, "Извините, я не могу ответить на этот вопрос. Свяжитесь с оператором.")
            return
        chats[user_id].append(f"Вот сообщение клиента: {question}")
        chats[user_id].append(f"На него мы ответили так: {result}")
        bot.send_message(user_id, result)
    except BaseException as e:
        bot.send_message(user_id, "Не понял ваш вопрос. Перефразируйте его, пожалуйста")
        bot.send_message(630043071, f"Ошибка: {e}")


def get_coordinates(address):
    """
    Получает координаты для указанного адреса, используя API Nominatim.

    :param address: Адрес, для которого нужно получить координаты.
    :return: Словарь с широтой и долготой или сообщение об ошибке.
    """
    url = "https://nominatim.openstreetmap.org/search"
    params = {
        "q": address,
        "format": "json",
        "addressdetails": 1,
    }
    headers = {
        "User-Agent": "MyGeocodingApp/1.0 (myemail@example.com)"  # Укажите ваш email
    }
    try:
        response = requests.get(url, params=params, headers=headers)
        response.raise_for_status()
        data = response.json()

        if data:
            return {
                "lat": data[0]["lat"],
                "lon": data[0]["lon"]
            }
        else:
            return {"error": "Адрес не найден, уточните, пожалуйста, ваш адрес:"}
    except requests.RequestException as e:
        return False


def check_coordinates_in_geojson(lat, lon):
    """
    Проверяет, находится ли точка с заданными координатами внутри геометрии GeoJSON.

    :param lat: Широта точки.
    :param lon: Долгота точки.
    :param geojson_data: GeoJSON-объект с геометрией (например, полигон).
    :return: True, если точка находится внутри геометрии, иначе False.
    """
    geojson_data = {"type": "FeatureCollection", "metadata": {"name": "Базары", "creator": "Yandex Map Constructor"},
                    "features": [{"type": "Feature", "id": 0, "geometry": {"type": "Polygon", "coordinates": [
                        [[77.03008307467887, 43.26352392893864], [77.02973368468903, 43.268817712160526],
                         [77.02867578764905, 43.27406096661248], [77.0269193949927, 43.27920317768693],
                         [77.02448125874508, 43.28419479178049], [77.02138471647301, 43.28898769471933],
                         [77.01838983197607, 43.290607398059464], [76.89872698673233, 43.29763910042564],
                         [76.89368645371434, 43.30207871650476], [76.8897617196466, 43.303258482960736],
                         [76.88019563774151, 43.306746218972194], [76.87891625713455, 43.30118499190101],
                         [76.87600626290046, 43.2961047658101], [76.87271984586215, 43.290871666056304],
                         [76.8718796034454, 43.283662932080674], [76.87863198298942, 43.28243111492782],
                         [76.88551310856617, 43.28054083786392], [76.92733600692496, 43.21385744638569],
                         [76.93723841076738, 43.20791016189928], [76.95782879226294, 43.198335130076906],
                         [76.9681247667234, 43.181196538171626], [76.98133137755936, 43.18253941549329],
                         [76.99071417976589, 43.190712816328904], [76.99616509538353, 43.20191402553062],
                         [77.004310066844, 43.207156397037075], [77.01018921234467, 43.218608270802626],
                         [77.01167702567409, 43.22206488441307], [77.01257290701561, 43.22409679782858],
                         [77.01316038927065, 43.225807840028224], [77.01424175288288, 43.22748160500198],
                         [77.01550778024976, 43.22927226328682], [77.01759818966791, 43.23352696466092],
                         [77.02132961172751, 43.23807080239827], [77.02443442652807, 43.242860075612185],
                         [77.02688261656802, 43.24784871255006], [77.02865046237825, 43.25298871228217],
                         [77.0297207763902, 43.25823060534442], [77.03008307467887, 43.26352392893864]]]},
                                  "properties": {"description": "Зеленый базар 1\nпросп. Жибек Жолы, 53, Алматы",
                                                 "fill": "#ed4543", "fill-opacity": 0.6, "stroke": "#ed4543",
                                                 "stroke-width": "5", "stroke-opacity": 0.9}},
                                 {"type": "Feature", "id": 1, "geometry": {"type": "Polygon", "coordinates": [
                                     [[76.89877069033967, 43.297627996826655], [77.0184055834224, 43.290659149236824],
                                      [77.02141820388867, 43.28898622065052], [77.02448992179443, 43.284245717543605],
                                      [77.02731269400441, 43.278929041242364], [77.03484651357086, 43.27923813031786],
                                      [77.04613760241075, 43.28524904780081], [77.05481520855744, 43.28936949963662],
                                      [77.05895249482532, 43.29660650054478], [77.0548770859469, 43.301777024379426],
                                      [77.04802867426434, 43.30606460481553], [77.03666059796389, 43.31305865670071],
                                      [77.0336237165696, 43.3145633433861], [77.03486678239172, 43.319617158910354],
                                      [77.03522945913953, 43.32491042497086], [77.0348797314117, 43.33020415165044],
                                      [77.03382078311009, 43.33544735108246], [77.03206263523515, 43.340589509147925],
                                      [77.0296220562012, 43.345581072686585], [77.02652240664877, 43.350373927920586],
                                      [77.02279342000509, 43.3549218654377], [77.01847092069124, 43.35918102719414],
                                      [77.01359648251258, 43.36311033115606], [77.0082170303891, 43.3666718694033],
                                      [77.0023843891786, 43.36983127576634], [76.99615478390707, 43.37255805935734],
                                      [76.9895882962439, 43.37482590068376], [76.98274828253425, 43.37661290739756],
                                      [76.97570075912175, 43.37790182712842], [76.96851376105546, 43.37868021527422],
                                      [76.96125668057036, 43.378940556068954], [76.95399959195639, 43.37868033571492],
                                      [76.9468125695827, 43.37790206684572], [76.93976500592134, 43.376613264074656],
                                      [76.9329249364137, 43.374826370873755], [76.92635837794712, 43.372558638516864],
                                      [76.92012868755644, 43.36983195829997], [76.91429594773966, 43.366672648718065],
                                      [76.90891638448197, 43.36311119972574], [76.9040418237214, 43.35918197663252],
                                      [76.89971919156851, 43.3549228865802], [76.89599006311748, 43.350375010913275],
                                      [76.89289026416391, 43.3455822070819], [76.89044952958156, 43.34059068400588],
                                      [76.88869122151529, 43.33544855507672], [76.8845422051416, 43.33258628609565],
                                      [76.88234695280458, 43.3308329526528], [76.88026329019178, 43.327608000353734],
                                      [76.87949060871468, 43.32635956360328], [76.8789325039588, 43.32445314499229],
                                      [76.87871751667596, 43.320890793591666], [76.8821499230919, 43.31689907413739],
                                      [76.88194529455298, 43.31233906788174], [76.88021155792568, 43.30680224611863],
                                      [76.89374778589138, 43.302060194084774],
                                      [76.89877069033967, 43.297627996826655]]]},
                                  "properties": {"description": "Зеленый базар 2\nпросп. Суюнбая, 261, Алматы",
                                                 "fill": "#1bad03", "fill-opacity": 0.6, "stroke": "#1bad03",
                                                 "stroke-width": "5", "stroke-opacity": 0.9}},
                                 {"type": "Feature", "id": 2, "geometry": {"type": "Polygon", "coordinates": [
                                     [[76.92733641111596, 43.213850450517526], [76.88550075224443, 43.28052489668215],
                                      [76.8786713094383, 43.28231192781352], [76.87163467947452, 43.28360086496775],
                                      [76.86445879170248, 43.2843792634795], [76.85721293050153, 43.28463960754735],
                                      [76.84996706122195, 43.28437938336382], [76.84279114929271, 43.28360110357768],
                                      [76.83575447932878, 43.282312282842945], [76.82892498106943, 43.28052536470013],
                                      [76.82236856890327, 43.278257600522636], [76.81614850158363, 43.275530881741524],
                                      [76.81032476851246, 43.272371527027786], [76.80495350867727, 43.26881002655875],
                                      [76.80008646796426, 43.26488074591942], [76.79577050015224, 43.260621592585736],
                                      [76.7920471164167, 43.256073648300145], [76.78895208765282, 43.25128077097893],
                                      [76.78651510336458, 43.24628917007931], [76.78475949027252, 43.2411469596026],
                                      [76.78370199317382, 43.23590369311401], [76.78335261995156, 43.23060988531896],
                                      [76.78371455198311, 43.225316524848594], [76.7847841205488, 43.22007458297426],
                                      [76.78655084919669, 43.21493452299086], [76.78899756138574, 43.20994581498279],
                                      [76.79210055211234, 43.205156460616486], [76.79582982163002, 43.2006125324882],
                                      [76.80014936880534, 43.196357732400955], [76.8050175411159, 43.19243297274792],
                                      [76.81038743779602, 43.18887598494758], [76.81620736217211, 43.18572095860735],
                                      [76.82242131880857, 43.182998214794196], [76.82896955070511, 43.18073391646166],
                                      [76.83578911145254, 43.17894981872884], [76.84058286906449, 43.17100429480862],
                                      [76.84808984601814, 43.15527348215421], [76.85863105883503, 43.150407564375946],
                                      [76.89019361299586, 43.152885460298364], [76.91297847645586, 43.156176251980185],
                                      [76.91926702256538, 43.160358459290485], [76.9327458049133, 43.17118528557811],
                                      [76.9385216304478, 43.175836925045054], [76.9450789938248, 43.17397427960944],
                                      [76.95733631717565, 43.17254410478958], [76.96768450355056, 43.17478279663273],
                                      [76.9680896012006, 43.18115831598119], [76.95730307856454, 43.19841378131683],
                                      [76.9372573876993, 43.20779236417905], [76.93100498132895, 43.21151420773805],
                                      [76.92733641111596, 43.213850450517526]]]},
                                  "properties": {"description": "Сарыарка   \n\nпросп. Алтынсарина, 27Б, Алматы",
                                                 "fill": "#1e98ff", "fill-opacity": 0.6, "stroke": "#1e98ff",
                                                 "stroke-width": "5", "stroke-opacity": 0.9}}]}
    try:
        # Создаем точку из координат
        point = Point(lon, lat)

        # Получаем геометрию из GeoJSON
        geometry = shape(geojson_data["features"][0]["geometry"])

        # Проверяем, находится ли точка внутри геометрии
        return geometry.contains(point)
    except BaseException as e:
        print(e)
        return -1


if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)
        except BaseException:
            pass
